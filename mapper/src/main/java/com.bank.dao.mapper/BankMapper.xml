<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bank.dao.BankMapper">
  <resultMap id="BaseResultMap" type="com.bank.pojo.Bank">
    <id column="BANK_ID" jdbcType="INTEGER" property="bankId" />
    <result column="BANK_NAME" jdbcType="VARCHAR" property="bankName" />
    <result column="BANK_ADDRESS" jdbcType="VARCHAR" property="bankAddress" />
    <result column="BANK_TEL" jdbcType="VARCHAR" property="bankTel" />
    <result column="BANK_LOAN_LIMIT" jdbcType="DOUBLE" property="bankLoanLimit" />
    <result column="BANK_OTHER1" jdbcType="VARCHAR" property="bankOther1" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    BANK_ID, BANK_NAME, BANK_ADDRESS, BANK_TEL, BANK_LOAN_LIMIT, BANK_OTHER1
  </sql>
  <select id="selectByExample" parameterType="com.bank.pojo.BankExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bank
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bank
    where BANK_ID = #{bankId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bank
    where BANK_ID = #{bankId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.bank.pojo.BankExample">
    delete from bank
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.bank.pojo.Bank">
    insert into bank (BANK_ID, BANK_NAME, BANK_ADDRESS, 
      BANK_TEL, BANK_LOAN_LIMIT, BANK_OTHER1
      )
    values (#{bankId,jdbcType=INTEGER}, #{bankName,jdbcType=VARCHAR}, #{bankAddress,jdbcType=VARCHAR}, 
      #{bankTel,jdbcType=VARCHAR}, #{bankLoanLimit,jdbcType=DOUBLE}, #{bankOther1,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bank.pojo.Bank">
    insert into bank
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bankId != null">
        BANK_ID,
      </if>
      <if test="bankName != null">
        BANK_NAME,
      </if>
      <if test="bankAddress != null">
        BANK_ADDRESS,
      </if>
      <if test="bankTel != null">
        BANK_TEL,
      </if>
      <if test="bankLoanLimit != null">
        BANK_LOAN_LIMIT,
      </if>
      <if test="bankOther1 != null">
        BANK_OTHER1,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bankId != null">
        #{bankId,jdbcType=INTEGER},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankAddress != null">
        #{bankAddress,jdbcType=VARCHAR},
      </if>
      <if test="bankTel != null">
        #{bankTel,jdbcType=VARCHAR},
      </if>
      <if test="bankLoanLimit != null">
        #{bankLoanLimit,jdbcType=DOUBLE},
      </if>
      <if test="bankOther1 != null">
        #{bankOther1,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bank.pojo.BankExample" resultType="java.lang.Long">
    select count(*) from bank
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bank
    <set>
      <if test="record.bankId != null">
        BANK_ID = #{record.bankId,jdbcType=INTEGER},
      </if>
      <if test="record.bankName != null">
        BANK_NAME = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankAddress != null">
        BANK_ADDRESS = #{record.bankAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.bankTel != null">
        BANK_TEL = #{record.bankTel,jdbcType=VARCHAR},
      </if>
      <if test="record.bankLoanLimit != null">
        BANK_LOAN_LIMIT = #{record.bankLoanLimit,jdbcType=DOUBLE},
      </if>
      <if test="record.bankOther1 != null">
        BANK_OTHER1 = #{record.bankOther1,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bank
    set BANK_ID = #{record.bankId,jdbcType=INTEGER},
      BANK_NAME = #{record.bankName,jdbcType=VARCHAR},
      BANK_ADDRESS = #{record.bankAddress,jdbcType=VARCHAR},
      BANK_TEL = #{record.bankTel,jdbcType=VARCHAR},
      BANK_LOAN_LIMIT = #{record.bankLoanLimit,jdbcType=DOUBLE},
      BANK_OTHER1 = #{record.bankOther1,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bank.pojo.Bank">
    update bank
    <set>
      <if test="bankName != null">
        BANK_NAME = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankAddress != null">
        BANK_ADDRESS = #{bankAddress,jdbcType=VARCHAR},
      </if>
      <if test="bankTel != null">
        BANK_TEL = #{bankTel,jdbcType=VARCHAR},
      </if>
      <if test="bankLoanLimit != null">
        BANK_LOAN_LIMIT = #{bankLoanLimit,jdbcType=DOUBLE},
      </if>
      <if test="bankOther1 != null">
        BANK_OTHER1 = #{bankOther1,jdbcType=VARCHAR},
      </if>
    </set>
    where BANK_ID = #{bankId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bank.pojo.Bank">
    update bank
    set BANK_NAME = #{bankName,jdbcType=VARCHAR},
      BANK_ADDRESS = #{bankAddress,jdbcType=VARCHAR},
      BANK_TEL = #{bankTel,jdbcType=VARCHAR},
      BANK_LOAN_LIMIT = #{bankLoanLimit,jdbcType=DOUBLE},
      BANK_OTHER1 = #{bankOther1,jdbcType=VARCHAR}
    where BANK_ID = #{bankId,jdbcType=INTEGER}
  </update>
</mapper>